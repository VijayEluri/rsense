RSense usage
============

[Index](index.txt)

Compilation
-----------

You can compile RSense with `make` command.

    % make rsense

After compilation, `lib/rsense.jar` will appear which is a main component of RSense.

In addition, you can run code-completion, type-inference and test scripts via Makefile.

    % make run-code-completion FILE=test.rb LOCATION=123
    % make run-type-inference FILE=test.rb LOCATION=123
    % make run-test

See also [testing](test.txt).

Primitive frontend
------------------

`lib/rsense.jar` is a main component of RSense. You can use it like

    % java -cp lib/jruby.jar:lib/antlr-runtime-3.2.jar:lib/rsense.jar org.cx4a.rsense.Main command option...

You have to specify a classpath including jar files under `lib/`. Available commands and options are following.

### command: code-completion ###

This commands gets completions at a specified file location. Specify file name to analyze by `--file=` option, and location `--location=` option. `--location=` option can be one of

* a offset number from top of file (0 based)
* line:col format (1 based)
* location mark in string

For example, `--location=123` means completions are needed at an offset 123 from top of file. `--location=10:8` means completions are needed at line number 10 and column 8. `--location=_|_` means completions are needed where `_|_~ appears. If `--location=` option is omitted, `--location=_|_` will be used instead.

An unit of offset number and column number is character based not byte based. If a source code contains non-ascii characters, you may have to specify encoding by `--encoding=` option. An encoding string must follow [Java Supported Encodings](http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html).

#### Example ####

Classpath option is omitted.

    % cat test1.rb
    1
    % java -cp ... org.cx4a.rsense.Main code-completion --file=test1.rb --location=1
    completion: ...
    ...
    % java -cp ... org.cx4a.rsense.Main code-completion --file=test1.rb --location=1:1
    completion: ...
    ...
    % cat test2.rb
    1_|_
    % java -cp ... org.cx4a.rsense.Main code-completion --file=test1.rb --location=_|_
    completion: ...
    ...
    
### command: type-inference ###

Same to code-completion command except this command gets a type of an expression. All of options of code-completion commands can be used also in this command.

#### Example ####

    % cat test1.rb
    1
    % java -cp ... org.cx4a.rsense.Main type-inference --file=test1.rb --location=1
    type: Fixnum
    % java -cp ... org.cx4a.rsense.Main type-inference --file=test1.rb --location=1:1
    type: Fixnum
    % cat test2.rb
    1_|_
    % java -cp ... org.cx4a.rsense.Main type-inference --file=test1.rb --location=_|_
    type: Fixnum

### command: script ###

This commands is useful for processing a series of commands again and again. If no script files are given, this commands reads commands from standard input. An end of each command is detected by mark specified by `--end-mark=` option. If `--end-mark=` option is not given, `--end-mark=EOF` will be used instead.

Extra commands are allowed in script mode. `exit` or `quit` commands exits RSense immediately. `clear` command clears current environment.

[Test scripts](test.txt) use this command to test many functionality quickly.

#### Example ####

    % java -cp ... org.cx4a.rsense.Main script
    > type-inference
    1_|_
    EOF
    type: Fixnum
    > code-completion
    1_|_
    EOF
    completion: ...
    ...
    ^D
    % cat test.rsense
    type-inference --test=Foo --should-be=Fixnum
    1_|_
    EOF

    type-inference --test=Bar --should-be=String
    'Hello'_|_
    EOF
    % java -cp ... org.cx4a.rsense.Main script test.rsense
    Foo... [OK]
    Bar... [OK]
    test: count=2, success=2, failure=0

### command: help ###

Show usage.

### command: version ###

Show version of RSense.

### option: --rsense-home ###

Specify RSense home directory. You don't need to specify this option maybe.

### option: --debug ###

You can see debug messages by specifying this option.

### option: --log= ###

You can keep log messages into a file by specifying this option.

### option: --format= ###

Specifying this option, a command output will be following specified format. Available format are `plain` and `emacs`. A default is `plain`.

### option: --encoding= ###

Specify a file encoding. An encoding string must follow [Java Supported Encodings](http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html). If this option is omitted, `--encoding=UTF-8` will be used instead.

Wrapper frontend
----------------

`bin/rsense` is a wrapper frontend that hides a complex of server/client communications. You can use it like `rsense.jar` without initialization time. `bin/rsense` automatically execute a primitive frontend as a background daemon, and starts communication with the daemon.

Generally, you use this wrapper frontend instead of a primitive frontend, because executing java program is so boring for hackers, isn't it?

#### Example ####

    % bin/rsense version
    RSense 0.0.1
    % cat test1.rb
    def f() 1 end
    % bin/rsense type-inference --file=test1.rb # define f()
    % cat test2.rb
    f_|_
    % bin/rsense type-inference --file=test2.rb # use f()
    type: Fixnum

Makefile
--------

You can also use `Makefile` as a simple frontend. See [usage](usage.txt) in detail.
